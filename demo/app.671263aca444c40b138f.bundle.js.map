{"version":3,"sources":["webpack:///./src/.fable/fable-library.3.0.4/Util.js","webpack:///./src/.fable/fable-library.3.0.4/Types.js","webpack:///./src/.fable/fable-library.3.0.4/Option.js","webpack:///./src/.fable/fable-library.3.0.4/lib/big.js","webpack:///./src/.fable/fable-library.3.0.4/Decimal.js","webpack:///./src/.fable/fable-library.3.0.4/Int32.js","webpack:///./src/.fable/fable-library.3.0.4/lib/long.js","webpack:///./src/.fable/fable-library.3.0.4/Long.js","webpack:///./src/.fable/fable-library.3.0.4/Seq.js","webpack:///./src/.fable/fable-library.3.0.4/Reflection.js","webpack:///./src/.fable/fable-library.3.0.4/Date.js","webpack:///./src/.fable/fable-library.3.0.4/String.js","webpack:///./src/.fable/fable-library.3.0.4/List.js","webpack:///./src/.fable/fable-library.3.0.4/Choice.js","webpack:///./src/.fable/fable-library.3.0.4/AsyncBuilder.js","webpack:///./src/.fable/fable-library.3.0.4/Async.js","webpack:///./src/.fable/Fable.Elmish.3.1.0/prelude.fs.js","webpack:///./src/.fable/Fable.Elmish.3.1.0/cmd.fs.js","webpack:///./src/.fable/Feliz.1.29.0/Interop.fs.js","webpack:///./src/.fable/Fable.Elmish.3.1.0/ring.fs.js","webpack:///./src/.fable/fable-library.3.0.4/Array.js","webpack:///./src/.fable/Fable.Elmish.3.1.0/program.fs.js","webpack:///./src/.fable/Fable.Elmish.React.3.0.1/common.fs.js","webpack:///./src/.fable/Fable.Elmish.React.3.0.1/react.fs.js","webpack:///./src/App.fs.js"],"names":["isArrayLike","x","Array","isArray","ArrayBuffer","isView","isHashable","GetHashCode","sameConstructor","y","Object","getPrototypeOf","constructor","padWithZeros","i","length","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","ObjectRef","o","idMap","has","set","count","get","WeakMap","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","arrayHash","Date","getTime","dateHash","values","map","v","id","equalArraysWith","eq","equalArrays","equals","Equals","isEquatable","compareDates","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","comparePrimitives","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","max","comparer","randomNext","min","Math","floor","random","uncurry","arity","f","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","Error","curry","partialApply","args","apply","undefined","concat","seqToString","self","callStack","Symbol","iterator","cons","entries","join","name","String","compareList","other","tail","res","head","List","this","cur","next","value","done","from","Union","fields","withParens","field","indexOf","splice","tag","cases","recordToJSON","recordToString","recordGetHashCode","recordEquals","thisNames","recordCompareTo","result","Record","Some","some","defaultArg","opt","defaultValue","P","e","c","cmp","NAME","INVALID","INVALID_DP","NUMERIC","parse","n","nl","test","charAt","slice","replace","search","substring","round","Big","DP","RM","dp","rm","more","xc","unshift","pop","stringify","k","z","push","NE","PE","abs","isneg","yc","l","div","a","b","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","d","shift","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","pow","one","sqrt","half","toExponential","mul","toFixed","toPrecision","sd","valueOf","toJSON","_Big_","findIndex","normalize","prototype","version","Decimal","NumberStyles","Long","wasm","WebAssembly","Instance","Module","Uint8Array","exports","low","high","unsigned","isLong","obj","radix","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","p","radixToPower","size","parseInt","multiply","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","divide","rem1","subtract","rem","remDiv","digits","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","shiftRightUnsigned","shiftLeft","shiftRight","log2","ceil","log","LN2","delta","approxRes","approxRem","numBits","LongLib","op_Multiply","fromBytes","bytes","le","fromBytesLE","fromBytesBE","toBytes","hi","lo","toBytesLE","toBytesBE","Seq","_a","iter","makeSeq","isArrayOrBufferView","xs","append","ys","delay","firstDone","iters","unfold","_b","output","innerIter","hasFinished","collect","empty","singleton","fold","acc","skip","take","truncate","fst","CaseInfo","declaringType","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","gen","getHashCode","getGenerics","fullnameHash","genHashes","t1","t2","getRecordElements","k1","v1","k2","v2","record_type","union_type","caseNames","tuple_type","option_type","generic","list_type","int32_type","endsWith","dateOffsetToString","isMinus","minutes","dateToHalfUTCString","toISOString","dateToStringWithCustomFormat","format","utc","match","rep","Number","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","dateToStringWithOffset","_c","dateWithOffset","dateToStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","_provider","fsFormatRegExp","interpolateRegExp","isNumeric","isLessThan","_Long","substr","toHex","printf","input","cont","createPrinter","strCopy","arg","formatOnce","continuePrint","toText","formatReplacement","prefix","flags","padLength","precision","sign","toLowerCase","toUpperCase","dateToString","zeroFlag","minusFlag","ch","padLeft","str2","_","isRight","_arg1","foldIndexed","state","f_mut","i_mut","acc_mut","_arg1_mut","foldIndexedAux","state_mut","xs_mut","List_1","ofSeq","fold_1","iterate","unitVar0","ofArrayWithTail","tail_1","col","ofArray","outOfRange","getSlice","lower","upper","lower_1","hasUpper","value_1","lastIndex","FSharpChoice$2","CancellationToken","cancelled","_id","_cancelled","_listeners","Map","listener","delete","$","addListener","Dispose","removeListener","OperationCanceledError","setPrototypeOf","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","err","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","computation1","computation2","Bind","generator","sequence","body","While","Delay","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","Log_onError","text","console","error","Log_toConsole","Cmd_exec","dispatch","cmd","call","Cmd_none","Cmd_batch","cmds","lists","Cmd_ofSub","reactApi","react","RingState$1","RingBuffer$1","target","targetIndex","start","fill","RingBuffer$1__Push_2B595","__","item","matchValue","wix_1","rix","items_1","wix$0027","this$","ix","items","first","step","last","rangeNumber","RingBuffer$1__doubleSize","wix","Program$4","init","update","subscribe","view","setState","syncDispatch","ProgramModule_withSetState","program","ProgramModule_view","ProgramModule_runWith","patternInput","model","rb","reentered","msg","nextMsg","msg_1","patternInput_1","model$0027","cmd$0027","ex_1","rix$0027","RingBuffer$1__Pop","ex_2","ex_3","LazyProps$1","render","equal","Components_LazyView$1","props","nextProps","_nextState","Component","Common_lazyView2With","Program_Internal_withReactSynchronousUsing","lazyView2With","placeholderId","react$002Ddom","document","getElementById","rnd","Const_width","Const_height","Const_bricksize","Const_initSnake","Const_startInterval","Direction","Direction$reflection","GameState","GameState$reflection","Model","Score","Snake","Apple","CurrentDirection","Timer","Model$reflection","Msg","Msg$reflection","DirectionModule_toVector","direction","Snake_calcMove","snake","vy","vx","hy","patternInput_2","Snake_isCollided","exists","tupledArg","Snake_calcCatch","Snake_$007CIsCollided$007CGotApple$007CAllGood$007C","applePos","Snake_gotApple","Commands_startTimer","interval","timer","setInterval","Commands_updateTimer","clearInterval","timer_1","Commands_stopTimer","newApple","dir","newSnake","matchValue_1","activePatternResult7084","newSnake_1","newTimerInverall","drawPlayground","width","heigth","children","createElement","style","position","left","top","backgroundColor","height","Children","toArray","value_6","ay","ax","onClick","_arg2","fontSize","_arg3","subscription","addEventListener","ProgramModule_run","Program_withReactSynchronous","ProgramModule_withSubscription","initModel","newModel","cmd_1"],"mappings":"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","file":"app.671263aca444c40b138f.bundle.js","sourcesContent":["// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nlet ObjectRef = /** @class */ (() => {\n    class ObjectRef {\n        static id(o) {\n            if (!ObjectRef.idMap.has(o)) {\n                ObjectRef.idMap.set(o, ++ObjectRef.count);\n            }\n            return ObjectRef.idMap.get(o);\n        }\n    }\n    ObjectRef.idMap = new WeakMap();\n    ObjectRef.count = 0;\n    return ObjectRef;\n})();\nexport { ObjectRef };\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return undefined;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        // if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return undefined;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(undefined, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(undefined, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(undefined, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(undefined, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport class List {\n    constructor(head, tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    [Symbol.iterator]() {\n        let cur = this;\n        return {\n            next: () => {\n                const value = cur === null || cur === void 0 ? void 0 : cur.head;\n                const done = (cur === null || cur === void 0 ? void 0 : cur.tail) == null;\n                cur = cur === null || cur === void 0 ? void 0 : cur.tail;\n                return { done, value };\n            },\n        };\n    }\n    toJSON() { return Array.from(this); }\n    toString() { return seqToString(this); }\n    GetHashCode() { return combineHashCodes(Array.from(this).map(structuralHash)); }\n    Equals(other) { return compareList(this, other) === 0; }\n    CompareTo(other) { return compareList(this, other); }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        if (this.fields.length === 0) {\n            return this.name;\n        }\n        else {\n            let fields = \"\";\n            let withParens = true;\n            if (this.fields.length === 1) {\n                const field = toString(this.fields[0]);\n                withParens = field.indexOf(\" \") >= 0;\n                fields = field;\n            }\n            else {\n                fields = this.fields.map((x) => toString(x)).join(\", \");\n            }\n            return this.name + (withParens ? \" (\" : \" \") + fields + (withParens ? \")\" : \"\");\n        }\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\nexport default Long;\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = LongLib.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal.js\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long.js\";\nimport { some, value } from \"./Option.js\";\nimport { compare, equals } from \"./Util.js\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nclass Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    [Symbol.iterator]() { return new Seq(this.f); }\n    next() {\n        var _a;\n        this.iter = (_a = this.iter) !== null && _a !== void 0 ? _a : this.f();\n        return this.iter.next();\n    }\n    toString() {\n        return \"seq [\" + Array.from(this).join(\"; \") + \"]\";\n    }\n}\nfunction makeSeq(f) {\n    return new Seq(f);\n}\nfunction isArrayOrBufferView(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs);\n}\nexport function ofArray(xs) {\n    if (Array.isArray(xs)) {\n        return delay(() => xs);\n    }\n    else {\n        return delay(() => unfold((i) => i != null && i < xs.length ? [xs[i], i + 1] : undefined, 0));\n    }\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, undefined];\n        return unfold(() => {\n            var _a, _b;\n            let cur;\n            if (!firstDone) {\n                cur = (_a = iters[0]) === null || _a === void 0 ? void 0 : _a.next();\n                if (cur != null && !cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [undefined, ys[Symbol.iterator]()];\n                }\n            }\n            cur = (_b = iters[1]) === null || _b === void 0 ? void 0 : _b.next();\n            return cur != null && !cur.done ? [cur.value, iters] : undefined;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output;\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = cur.value;\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = undefined;\n                    }\n                }\n            }\n            return innerIter != null ? [output, innerIter] : undefined;\n        }, undefined);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    let cur1;\n    let cur2;\n    let c = 0;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        c = f(cur1.value, cur2.value);\n        if (c !== 0) {\n            break;\n        }\n    }\n    return (c !== 0) ? c : (cur1.done && !cur2.done) ? -1 : (!cur1.done && cur2.done) ? 1 : 0;\n}\nexport function delay(f) {\n    return makeSeq(() => f()[Symbol.iterator]());\n}\nexport function empty() {\n    return delay(() => []);\n}\nexport function singleton(y) {\n    return delay(() => [y]);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : undefined, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : undefined, undefined));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            try {\n                return empty();\n            }\n            finally {\n                finalFn();\n            }\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : undefined;\n            }\n            catch (err) {\n                return undefined;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const ar2 = isArrayOrBufferView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? undefined : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : undefined, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return undefined;\n    }\n    if (isArrayOrBufferView(xs)) {\n        return i < xs.length ? some(xs[i]) : undefined;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return undefined;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => (f(x), undefined), undefined, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => (f(x, y), undefined), undefined, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => (f(i !== null && i !== void 0 ? i : 0, x), undefined), undefined, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => (f(i !== null && i !== void 0 ? i : 0, x, y), undefined), undefined, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? undefined : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return isArrayOrBufferView(xs)\n        ? xs.length\n        : fold((acc, _x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : undefined;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        const cur = iter.next();\n        if (cur.done) {\n            return empty();\n        }\n        const hd = cur.value;\n        const tl = tail(xs);\n        const ys = scan(([_, last], next) => [last, next], [hd, hd], tl);\n        return skip(1, ys);\n    });\n}\nexport function rangeChar(first, last) {\n    const firstNum = first.charCodeAt(0);\n    const lastNum = last.charCodeAt(0);\n    return delay(() => unfold((x) => x <= lastNum ? [String.fromCharCode(x), x + 1] : undefined, firstNum));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : undefined, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return undefined;\n        }, undefined);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function skip(n, xs) {\n    return makeSeq(() => {\n        const iter = xs[Symbol.iterator]();\n        for (let i = 1; i <= n; i++) {\n            if (iter.next().done) {\n                throw new Error(\"Seq has not enough elements\");\n            }\n        }\n        return iter;\n    });\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold(() => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, undefined];\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? undefined : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return undefined;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return makeSeq(() => {\n        // Capture a copy of the first value in the closure\n        // so the sequence is restarted every time, see #1230\n        let acc = fst;\n        const iter = {\n            next() {\n                const res = f(acc);\n                if (res != null) {\n                    const v = value(res);\n                    if (v != null) {\n                        acc = v[1];\n                        return { done: false, value: v[0] };\n                    }\n                }\n                return { done: true, value: undefined };\n            },\n        };\n        return iter;\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return makeSeq(() => {\n        let window = [];\n        const iter = source[Symbol.iterator]();\n        const iter2 = {\n            next() {\n                let cur;\n                while (window.length < windowSize) {\n                    if ((cur = iter.next()).done) {\n                        return { done: true, value: undefined };\n                    }\n                    window.push(cur.value);\n                }\n                const value = window;\n                window = window.slice(1);\n                return { done: false, value };\n            },\n        };\n        return iter2;\n    });\n}\nexport function transpose(source) {\n    return makeSeq(() => {\n        const iters = Array.from(source, (x) => x[Symbol.iterator]());\n        const iter = {\n            next() {\n                if (iters.length === 0) {\n                    return { done: true, value: undefined }; // empty sequence\n                }\n                const results = Array.from(iters, (iter) => iter.next());\n                if (results[0].done) {\n                    if (!results.every((x) => x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    return { done: true, value: undefined };\n                }\n                else {\n                    if (!results.every((x) => !x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    const values = results.map((x) => x.value);\n                    return { done: false, value: values };\n                }\n            },\n        };\n        return iter;\n    });\n}\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    var _a, _b;\n    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\") && !isArray(t);\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else {\n        throw new Error(`Cannot access constructor of ${t.fullname}`);\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    if (input === null) {\n        throw new Error(\"Value cannot be null when parsing DateTime\");\n    }\n    if (input.trim() === \"\") {\n        throw new Error(\"An empty string is not recognized as a valid DateTime\");\n    }\n    let date = new Date(input);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","import { toString as dateToString } from \"./Date.js\";\nimport Decimal from \"./Decimal.js\";\nimport Long, * as _Long from \"./Long.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\n// These are used for formatting and only take longs and decimals into account (no bigint)\nfunction isNumeric(x) {\n    return typeof x === \"number\" || x instanceof Long || x instanceof Decimal;\n}\nfunction isLessThan(x, y) {\n    if (x instanceof Long) {\n        return _Long.compare(x, y) < 0;\n    }\n    else if (x instanceof Decimal) {\n        return x.cmp(y) < 0;\n    }\n    else {\n        return x < y;\n    }\n}\nfunction multiply(x, y) {\n    if (x instanceof Long) {\n        return _Long.op_Multiply(x, y);\n    }\n    else if (x instanceof Decimal) {\n        return x.mul(y);\n    }\n    else {\n        return x * y;\n    }\n}\nfunction toFixed(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toFixed(dp).substr(1);\n    }\n    else {\n        return x.toFixed(dp);\n    }\n}\nfunction toPrecision(x, sd) {\n    if (x instanceof Long) {\n        return String(x) + (0).toPrecision(sd).substr(1);\n    }\n    else {\n        return x.toPrecision(sd);\n    }\n}\nfunction toExponential(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toExponential(dp).substr(1);\n    }\n    else {\n        return x.toExponential(dp);\n    }\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return _Long.toString(x.unsigned ? x : _Long.fromBytes(_Long.toBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(input, values) {\n    let i = 0;\n    return input.replace(interpolateRegExp, (_, prefix, flags, padLength, precision, format) => {\n        return formatReplacement(values[i++], prefix, flags, padLength, precision, format);\n    });\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, prefix, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return prefix ? prefix + rep : rep;\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, padLength, precision, format) => {\n        const once = formatReplacement(rep, prefix, flags, padLength, precision, format);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n","import { List } from \"./Types.js\";\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\nimport { FSharpRef, List as List_1 } from \"./Types.js\";\nimport { transpose as transpose_1, pairwise as pairwise_1, collect as collect_1, scanBack as scanBack_1, scan as scan_1, foldBack2 as foldBack2_1, fold2 as fold2_1, fold as fold_1, map as map_1 } from \"./Seq.js\";\nimport { uncurry, count } from \"./Util.js\";\nimport { splitInto as splitInto_1, chunkBySize as chunkBySize_1, permute as permute_1, findIndexBack as findIndexBack_1, tryFindIndexBack as tryFindIndexBack_1 } from \"./Array.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { getItemFromDict, addToDict, tryGetValue, addToSet } from \"./MapUtil.js\";\nimport { Dictionary } from \"./MutableMap.js\";\n\nexport function empty() {\n    return new List();\n}\n\nexport function singleton(x) {\n    return new List(x, empty());\n}\n\nexport function cons(x, xs) {\n    return new List(x, xs);\n}\n\nexport function head(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.head;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function tryHead(_arg1) {\n    if (_arg1.tail != null) {\n        return some(_arg1.head);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function tail(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.tail;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function last(_arg1_mut) {\n    last:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return _arg1.head;\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue last;\n            }\n        }\n        else {\n            throw (new Error(\"List was empty\"));\n        }\n        break;\n    }\n}\n\nexport function tryLast(_arg1_mut) {\n    tryLast:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return some(_arg1.head);\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue tryLast;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function compareWith(comparer, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    else {\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop:\n            while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = [xs_1, ys_1];\n                if (matchValue[0].tail != null) {\n                    if (matchValue[1].tail != null) {\n                        const matchValue_1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n                        if (matchValue_1 === 0) {\n                            xs_1_mut = matchValue[0].tail;\n                            ys_1_mut = matchValue[1].tail;\n                            continue loop;\n                        }\n                        else {\n                            return matchValue_1 | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue[1].tail == null) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n                break;\n            }\n        };\n        return loop(xs, ys) | 0;\n    }\n}\n\nexport function foldIndexedAux(f_mut, i_mut, acc_mut, _arg1_mut) {\n    foldIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            f_mut = f;\n            i_mut = (i + 1);\n            acc_mut = f(i, acc, _arg1.head);\n            _arg1_mut = _arg1.tail;\n            continue foldIndexedAux;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function foldIndexed(f, state, xs) {\n    return foldIndexedAux(f, 0, state, xs);\n}\n\nexport function fold(f_mut, state_mut, xs_mut) {\n    fold:\n    while (true) {\n        const f = f_mut, state = state_mut, xs = xs_mut;\n        if (xs.tail != null) {\n            f_mut = f;\n            state_mut = f(state, xs.head);\n            xs_mut = xs.tail;\n            continue fold;\n        }\n        else {\n            return state;\n        }\n        break;\n    }\n}\n\nexport function reverse(xs) {\n    return fold((acc, x) => (new List_1(x, acc)), new List_1(), xs);\n}\n\nexport function foldBack(f, xs, state) {\n    return fold((acc, x) => f(x, acc), state, reverse(xs));\n}\n\nexport function toSeq(xs) {\n    return map_1((x) => x, xs);\n}\n\nexport function ofSeq(xs) {\n    return reverse(fold_1((acc, x) => (new List_1(x, acc)), new List_1(), xs));\n}\n\nexport function concat(lists) {\n    return reverse(fold_1((state, xs) => fold((acc, x) => (new List_1(x, acc)), state, xs), new List_1(), lists));\n}\n\nexport function foldIndexed2Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut) {\n    foldIndexed2Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y);\n                bs_mut = xs;\n                cs_mut = ys;\n                continue foldIndexed2Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed2(f, state, xs, ys) {\n    return foldIndexed2Aux(f, 0, state, xs, ys);\n}\n\nexport function fold2(f, state, xs, ys) {\n    return fold2_1(f, state, xs, ys);\n}\n\nexport function foldBack2(f, xs, ys, state) {\n    return foldBack2_1(f, xs, ys, state);\n}\n\nexport function unfold(f, state) {\n    const unfoldInner = (acc_mut, state_1_mut) => {\n        unfoldInner:\n        while (true) {\n            const acc = acc_mut, state_1 = state_1_mut;\n            const matchValue = f(state_1);\n            if (matchValue != null) {\n                acc_mut = (new List_1(matchValue[0], acc));\n                state_1_mut = matchValue[1];\n                continue unfoldInner;\n            }\n            else {\n                return reverse(acc);\n            }\n            break;\n        }\n    };\n    return unfoldInner(new List_1(), state);\n}\n\nexport function foldIndexed3Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut, ds_mut) {\n    foldIndexed3Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut, ds = ds_mut;\n        const matchValue = [bs, cs, ds];\n        let pattern_matching_result, x, xs, y, ys, z, zs;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                if (matchValue[2].tail != null) {\n                    pattern_matching_result = 1;\n                    x = matchValue[0].head;\n                    xs = matchValue[0].tail;\n                    y = matchValue[1].head;\n                    ys = matchValue[1].tail;\n                    z = matchValue[2].head;\n                    zs = matchValue[2].tail;\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            if (matchValue[2].tail == null) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y, z);\n                bs_mut = xs;\n                cs_mut = ys;\n                ds_mut = zs;\n                continue foldIndexed3Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed3(f, seed, xs, ys, zs) {\n    return foldIndexed3Aux(f, 0, seed, xs, ys, zs);\n}\n\nexport function fold3(f, state, xs, ys, zs) {\n    return foldIndexed3((_arg1, acc, x, y, z) => f(acc, x, y, z), state, xs, ys, zs);\n}\n\nexport function scan(f, state, xs) {\n    return ofSeq(scan_1(f, state, xs));\n}\n\nexport function scanBack(f, xs, state) {\n    return ofSeq(scanBack_1(f, xs, state));\n}\n\nexport function length(xs) {\n    return fold((acc, _arg1) => (acc + 1), 0, xs);\n}\n\nexport function append(xs, ys) {\n    return fold((acc, x) => (new List_1(x, acc)), ys, reverse(xs));\n}\n\nexport function collect(f, xs) {\n    return ofSeq(collect_1(f, xs));\n}\n\nexport function map(f, xs) {\n    return reverse(fold((acc, x) => (new List_1(f(x), acc)), new List_1(), xs));\n}\n\nexport function mapIndexed(f, xs) {\n    return reverse(foldIndexed((i, acc, x) => (new List_1(f(i, x), acc)), new List_1(), xs));\n}\n\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\n\nexport function map2(f, xs, ys) {\n    return reverse(fold2((acc, x, y) => (new List_1(f(x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function mapIndexed2(f, xs, ys) {\n    return reverse(foldIndexed2((i, acc, x, y) => (new List_1(f(i, x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function map3(f, xs, ys, zs) {\n    return reverse(fold3((acc, x, y, z) => (new List_1(f(x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapIndexed3(f, xs, ys, zs) {\n    return reverse(foldIndexed3((i, acc, x, y, z) => (new List_1(f(i, x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapFold(f, s, xs) {\n    const patternInput_1 = fold((tupledArg, x) => {\n        const patternInput = f(tupledArg[1], x);\n        return [new List_1(patternInput[0], tupledArg[0]), patternInput[1]];\n    }, [new List_1(), s], xs);\n    return [reverse(patternInput_1[0]), patternInput_1[1]];\n}\n\nexport function mapFoldBack(f, xs, s) {\n    return mapFold((s_1, v) => f(v, s_1), s, reverse(xs));\n}\n\nexport function iterate(f, xs) {\n    fold((unitVar0, x) => {\n        f(x);\n    }, void 0, xs);\n}\n\nexport function iterate2(f, xs, ys) {\n    fold2((unitVar0, x, y) => {\n        f(x, y);\n    }, void 0, xs, ys);\n}\n\nexport function iterateIndexed(f, xs) {\n    foldIndexed((i, unitVar1, x) => {\n        f(i, x);\n    }, void 0, xs);\n}\n\nexport function iterateIndexed2(f, xs, ys) {\n    foldIndexed2((i, unitVar1, x, y) => {\n        f(i, x, y);\n    }, void 0, xs, ys);\n}\n\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = count(xs) - 1; i >= 0; i--) {\n        res = (new List_1(xs[i], res));\n    }\n    return res;\n}\n\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, new List_1());\n}\n\nexport function isEmpty(_arg1) {\n    if (_arg1.tail == null) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function tryPickIndexedAux(f_mut, i_mut, _arg1_mut) {\n    tryPickIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            const result = f(i, _arg1.head);\n            if (result == null) {\n                f_mut = f;\n                i_mut = (i + 1);\n                _arg1_mut = _arg1.tail;\n                continue tryPickIndexedAux;\n            }\n            else {\n                return result;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function tryPickIndexed(f, xs) {\n    return tryPickIndexedAux(f, 0, xs);\n}\n\nexport function tryPick(f, xs) {\n    return tryPickIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function tryFindIndexed(f, xs) {\n    return tryPickIndexed((i, x) => (f(i, x) ? some(x) : (void 0)), xs);\n}\n\nexport function tryFind(f, xs) {\n    return tryPickIndexed((_arg1, x) => (f(x) ? some(x) : (void 0)), xs);\n}\n\nexport function findIndexed(f, xs) {\n    const matchValue = tryFindIndexed(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function find(f, xs) {\n    return findIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function findBack(f, xs) {\n    return find(f, reverse(xs));\n}\n\nexport function tryFindBack(f, xs) {\n    return tryFind(f, reverse(xs));\n}\n\nexport function tryFindIndex(f, xs) {\n    return tryPickIndexed((i, x) => (f(x) ? i : (void 0)), xs);\n}\n\nexport function tryFindIndexBack(f, xs) {\n    return tryFindIndexBack_1(f, Array.from(xs));\n}\n\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue != null) {\n        return matchValue | 0;\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function findIndexBack(f, xs) {\n    return findIndexBack_1(f, Array.from(xs));\n}\n\nexport function item(n, xs) {\n    return findIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function tryItem(n, xs) {\n    return tryFindIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function filter(f, xs) {\n    return reverse(fold((acc, x) => (f(x) ? (new List_1(x, acc)) : acc), new List_1(), xs));\n}\n\nexport function partition(f, xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        return (x) => (f(x) ? [new List_1(x, lacc), racc] : [lacc, new List_1(x, racc)]);\n    }), [new List_1(), new List_1()], reverse(xs));\n}\n\nexport function choose(f, xs) {\n    return reverse(fold((acc, x) => {\n        const matchValue = f(x);\n        return (matchValue == null) ? acc : (new List_1(value_1(matchValue), acc));\n    }, new List_1(), xs));\n}\n\nexport function contains(value, list, eq) {\n    const loop = (xs_mut) => {\n        loop:\n        while (true) {\n            const xs = xs_mut;\n            if (xs.tail != null) {\n                if (eq.Equals(value, xs.head)) {\n                    return true;\n                }\n                else {\n                    xs_mut = xs.tail;\n                    continue loop;\n                }\n            }\n            else {\n                return false;\n            }\n            break;\n        }\n    };\n    return loop(list);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (isEmpty(array)) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return filter((arg00) => addToSet(arg00, cached), array);\n    }\n}\n\nexport function initialize(n, f) {\n    let xs = new List_1();\n    for (let i = 0; i <= (n - 1); i++) {\n        xs = (new List_1(f(i), xs));\n    }\n    return reverse(xs);\n}\n\nexport function replicate(n, x) {\n    return initialize(n, (_arg1) => x);\n}\n\nexport function reduce(f, _arg1) {\n    if (_arg1.tail != null) {\n        return fold(f, _arg1.head, _arg1.tail);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function reduceBack(f, _arg1) {\n    if (_arg1.tail != null) {\n        return foldBack(f, _arg1.tail, _arg1.head);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc ? f(x) : false), true, xs);\n}\n\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc ? f(x, y) : false), true, xs, ys);\n}\n\nexport function exists(f_mut, _arg1_mut) {\n    exists:\n    while (true) {\n        const f = f_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (f(_arg1.head)) {\n                return true;\n            }\n            else {\n                f_mut = f;\n                _arg1_mut = _arg1.tail;\n                continue exists;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function exists2(f_mut, bs_mut, cs_mut) {\n    exists2:\n    while (true) {\n        const f = f_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return false;\n            }\n            case 1: {\n                if (f(x, y)) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    bs_mut = xs;\n                    cs_mut = ys;\n                    continue exists2;\n                }\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1])], xs, [new List_1(), new List_1()]);\n}\n\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1]), new List_1(tupledArg[2], tupledArg_1[2])], xs, [new List_1(), new List_1(), new List_1()]);\n}\n\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\n\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\nexport function sort(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(x, y))), xs_1)));\n}\n\nexport function sortBy(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y)))), xs_1)));\n}\n\nexport function sortDescending(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1))), xs_1)));\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1))), xs_1)));\n}\n\nexport function sortWith(comparer, xs) {\n    let comparer_1, xs_1;\n    return ofArray((comparer_1 = comparer, (xs_1 = Array.from(xs), (xs_1.sort(comparer_1), xs_1))));\n}\n\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\n\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(li, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), li);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, x), averager.GetZero(), xs), length(xs));\n}\n\nexport function averageBy(f, xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, f(x)), averager.GetZero(), xs), length(xs));\n}\n\nexport function permute(f, xs) {\n    return ofArray(permute_1(f, Array.from(xs)));\n}\n\nexport function chunkBySize(chunkSize, xs) {\n    return map(ofArray, ofArray(chunkBySize_1(chunkSize, Array.from(xs))));\n}\n\nexport function skip(i, xs) {\n    const skipInner = (i_1_mut, xs_1_mut) => {\n        skipInner:\n        while (true) {\n            const i_1 = i_1_mut, xs_1 = xs_1_mut;\n            const matchValue = [i_1, xs_1];\n            if (matchValue[0] === 0) {\n                return xs_1;\n            }\n            else if (matchValue[1].tail != null) {\n                i_1_mut = (i_1 - 1);\n                xs_1_mut = matchValue[1].tail;\n                continue skipInner;\n            }\n            else {\n                throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n            }\n            break;\n        }\n    };\n    const matchValue_1 = [i, xs];\n    if (matchValue_1[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_4, xs_4;\n        if (matchValue_1[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue_1[0] === 1) {\n            if (matchValue_1[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_4 = matchValue_1[0];\n                xs_4 = matchValue_1[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_4 = matchValue_1[0];\n            xs_4 = matchValue_1[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return xs;\n            }\n            case 1: {\n                return matchValue_1[1].tail;\n            }\n            case 2: {\n                return skipInner(i_4, xs_4);\n            }\n        }\n    }\n}\n\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile:\n    while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        let pattern_matching_result, h_1, t_1;\n        if (xs.tail != null) {\n            if (predicate(xs.head)) {\n                pattern_matching_result = 0;\n                h_1 = xs.head;\n                t_1 = xs.tail;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                predicate_mut = predicate;\n                xs_mut = t_1;\n                continue skipWhile;\n            }\n            case 1: {\n                return xs;\n            }\n        }\n        break;\n    }\n}\n\nexport function takeSplitAux(error_mut, i_mut, acc_mut, xs_mut) {\n    takeSplitAux:\n    while (true) {\n        const error = error_mut, i = i_mut, acc = acc_mut, xs = xs_mut;\n        const matchValue = [i, xs];\n        if (matchValue[0] === 0) {\n            return [reverse(acc), xs];\n        }\n        else if (matchValue[1].tail != null) {\n            error_mut = error;\n            i_mut = (i - 1);\n            acc_mut = (new List_1(matchValue[1].head, acc));\n            xs_mut = matchValue[1].tail;\n            continue takeSplitAux;\n        }\n        else if (error) {\n            throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n        }\n        else {\n            return [reverse(acc), xs];\n        }\n        break;\n    }\n}\n\nexport function take(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function takeWhile(predicate, xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail == null) {\n            if (predicate(xs.head)) {\n                return xs;\n            }\n            else {\n                return xs.tail;\n            }\n        }\n        else if (!predicate(xs.head)) {\n            return new List_1();\n        }\n        else {\n            return new List_1(xs.head, takeWhile(predicate, xs.tail));\n        }\n    }\n    else {\n        return xs;\n    }\n}\n\nexport function truncate(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(false, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function splitAt(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_2;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_2 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_2 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [new List_1(), xs];\n            }\n            case 1: {\n                return [new List_1(matchValue[1].head, new List_1()), matchValue[1].tail];\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_2);\n            }\n        }\n    }\n}\n\nexport function outOfRange() {\n    throw (new Error(\"Index out of range\"));\n}\n\nexport function getSlice(lower, upper, xs) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const hasUpper = upper != null;\n    if (lower_1 < 0) {\n        return outOfRange();\n    }\n    else if (hasUpper ? (value_1(upper) < lower_1) : false) {\n        return new List_1();\n    }\n    else {\n        let lastIndex = -1;\n        const res = foldIndexed((i, acc, x) => {\n            lastIndex = i;\n            if ((lower_1 <= i) ? ((!hasUpper) ? true : (i <= value_1(upper))) : false) {\n                return new List_1(x, acc);\n            }\n            else {\n                return acc;\n            }\n        }, new List_1(), xs);\n        if ((lower_1 > (lastIndex + 1)) ? true : (hasUpper ? (value_1(upper) > lastIndex) : false)) {\n            outOfRange();\n        }\n        return reverse(res);\n    }\n}\n\nexport function distinctBy(projection, xs, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => addToSet(projection(arg), hashSet), xs);\n}\n\nexport function distinct(xs, eq) {\n    return distinctBy((x) => x, xs, eq);\n}\n\nexport function exactlyOne(xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail != null) {\n            throw (new Error(\"Input list too long\\\\nParameter name: list\"));\n        }\n        else {\n            return xs.head;\n        }\n    }\n    else {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: list\"));\n    }\n}\n\nexport function groupBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, new List_1(v, matchValue[1]));\n        }\n        else {\n            addToDict(dict, key, new List_1(v, new List_1()));\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, reverse(getItemFromDict(dict, key_1))], result));\n    }, keys);\n    return result;\n}\n\nexport function countBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, getItemFromDict(dict, key_1)], result));\n    }, keys);\n    return result;\n}\n\nexport function where(predicate, source) {\n    return filter(predicate, source);\n}\n\nexport function pairwise(source) {\n    return ofSeq(pairwise_1(source));\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res = new List_1();\n    for (let i = length(source); i >= windowSize; i--) {\n        res = (new List_1(getSlice(i - windowSize, i - 1, source), res));\n    }\n    return res;\n}\n\nexport function splitInto(chunks, source) {\n    return map(ofArray, ofArray(splitInto_1(chunks, Array.from(source))));\n}\n\nexport function transpose(lists) {\n    return ofSeq(map_1(ofSeq, transpose_1(lists)));\n}\n\n","import { Union } from \"./Types.js\";\nimport { union_type } from \"./Reflection.js\";\nimport { some } from \"./Option.js\";\n\nexport class FSharpResult$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ok\", \"Error\"];\n    }\n}\n\nexport function FSharpResult$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\n}\n\nexport function Result_Map(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, mapping(result.fields[0]));\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport function Result_MapError(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, mapping(result.fields[0]));\n    }\n}\n\nexport function Result_Bind(binder, result) {\n    if (result.tag === 0) {\n        return binder(result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport class FSharpChoice$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of2\", \"Choice2Of2\"];\n    }\n}\n\nexport function FSharpChoice$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\n}\n\nexport class FSharpChoice$3 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\n    }\n}\n\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\n}\n\nexport class FSharpChoice$4 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\n    }\n}\n\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\n}\n\nexport class FSharpChoice$5 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\n    }\n}\n\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\n}\n\nexport class FSharpChoice$6 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\n    }\n}\n\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\n}\n\nexport class FSharpChoice$7 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\n    }\n}\n\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\n}\n\nexport function Choice_makeChoice1Of2(x) {\n    return new FSharpChoice$2(0, x);\n}\n\nexport function Choice_makeChoice2Of2(x) {\n    return new FSharpChoice$2(1, x);\n}\n\nexport function Choice_tryValueIfChoice1Of2(x) {\n    if (x.tag === 0) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Choice_tryValueIfChoice2Of2(x) {\n    if (x.tag === 1) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { map } from \"./Seq.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { some } from \"../fable-library.3.0.4/Option.js\";\r\nimport Timer from \"../fable-library.3.0.4/Timer.js\";\r\nimport { add } from \"../fable-library.3.0.4/Observable.js\";\r\n\r\nexport function Log_onError(text, ex) {\r\n    console.error(some(text), ex);\r\n}\r\n\r\nexport function Log_toConsole(text, o) {\r\n    console.log(some(text), o);\r\n}\r\n\r\nexport function Timer_delay(interval, callback) {\r\n    let t;\r\n    let returnVal = new Timer(interval);\r\n    returnVal.AutoReset = false;\r\n    t = returnVal;\r\n    add(callback, t.Elapsed);\r\n    t.Enabled = true;\r\n    t.Start();\r\n}\r\n\r\n","import { singleton, concat, map, empty, iterate } from \"../fable-library.3.0.4/List.js\";\r\nimport { singleton as singleton_1 } from \"../fable-library.3.0.4/AsyncBuilder.js\";\r\nimport { startImmediate, catchAsync } from \"../fable-library.3.0.4/Async.js\";\r\nimport { Timer_delay } from \"./prelude.fs.js\";\r\n\r\nexport function Cmd_exec(onError, dispatch, cmd) {\r\n    iterate((call) => {\r\n        try {\r\n            call(dispatch);\r\n        }\r\n        catch (ex) {\r\n            onError(ex);\r\n        }\r\n    }, cmd);\r\n}\r\n\r\nexport function Cmd_none() {\r\n    return empty();\r\n}\r\n\r\nexport function Cmd_map(f, cmd) {\r\n    return map((g) => ((arg_1) => {\r\n        g((arg) => {\r\n            arg_1(f(arg));\r\n        });\r\n    }), cmd);\r\n}\r\n\r\nexport function Cmd_batch(cmds) {\r\n    return concat(cmds);\r\n}\r\n\r\nexport function Cmd_ofSub(sub) {\r\n    return singleton(sub);\r\n}\r\n\r\nexport function Cmd_OfFunc_either(task, arg, ofSuccess, ofError) {\r\n    const bind = (dispatch) => {\r\n        try {\r\n            return dispatch(ofSuccess(task(arg)));\r\n        }\r\n        catch (x) {\r\n            return dispatch(ofError(x));\r\n        }\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfFunc_perform(task, arg, ofSuccess) {\r\n    const bind = (dispatch) => {\r\n        try {\r\n            dispatch(ofSuccess(task(arg)));\r\n        }\r\n        catch (x) {\r\n        }\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfFunc_attempt(task, arg, ofError) {\r\n    const bind = (dispatch) => {\r\n        try {\r\n            task(arg);\r\n        }\r\n        catch (x) {\r\n            dispatch(ofError(x));\r\n        }\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfFunc_result(msg) {\r\n    return singleton((dispatch) => {\r\n        dispatch(msg);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_either(start, task, arg, ofSuccess, ofError) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\r\n        let x_1, x;\r\n        const r = _arg1;\r\n        dispatch((r.tag === 1) ? (x_1 = r.fields[0], ofError(x_1)) : (x = r.fields[0], ofSuccess(x)));\r\n        return singleton_1.Zero();\r\n    }));\r\n    return singleton((arg_1) => {\r\n        start(bind(arg_1));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_perform(start, task, arg, ofSuccess) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\r\n        const r = _arg1;\r\n        if (r.tag === 0) {\r\n            const x = r.fields[0];\r\n            dispatch(ofSuccess(x));\r\n            return singleton_1.Zero();\r\n        }\r\n        else {\r\n            return singleton_1.Zero();\r\n        }\r\n    }));\r\n    return singleton((arg_1) => {\r\n        start(bind(arg_1));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_attempt(start, task, arg, ofError) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\r\n        const r = _arg1;\r\n        if (r.tag === 1) {\r\n            const x = r.fields[0];\r\n            dispatch(ofError(x));\r\n            return singleton_1.Zero();\r\n        }\r\n        else {\r\n            return singleton_1.Zero();\r\n        }\r\n    }));\r\n    return singleton((arg_1) => {\r\n        start(bind(arg_1));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsyncWith_result(start, task) {\r\n    const bind = (dispatch) => singleton_1.Delay(() => singleton_1.Bind(task, (_arg1) => {\r\n        const r = _arg1;\r\n        dispatch(r);\r\n        return singleton_1.Zero();\r\n    }));\r\n    return singleton((arg) => {\r\n        start(bind(arg));\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsync_start(x) {\r\n    Timer_delay(0, (_arg1) => {\r\n        startImmediate(x);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfPromise_either(task, arg, ofSuccess, ofError) {\r\n    const bind = (dispatch) => {\r\n        const value_1 = task(arg).then((arg_1) => dispatch(ofSuccess(arg_1))).catch((arg_3) => dispatch(ofError(arg_3)));\r\n        void value_1;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfPromise_perform(task, arg, ofSuccess) {\r\n    const bind = (dispatch) => {\r\n        const value = task(arg).then((arg_1) => dispatch(ofSuccess(arg_1)));\r\n        void value;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfPromise_attempt(task, arg, ofError) {\r\n    const bind = (dispatch) => {\r\n        const value_1 = task(arg).catch((arg_2) => {\r\n            dispatch(ofError(arg_2));\r\n        });\r\n        void value_1;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_OfPromise_result(task) {\r\n    const bind = (dispatch) => {\r\n        const value = task.then(dispatch);\r\n        void value;\r\n    };\r\n    return singleton(bind);\r\n}\r\n\r\nexport function Cmd_attemptFunc(task, arg, ofError) {\r\n    return Cmd_OfFunc_attempt(task, arg, ofError);\r\n}\r\n\r\n","import react from \"react\";\r\n\r\nexport const reactApi = react;\r\n\r\n","import { Union } from \"../fable-library.3.0.4/Types.js\";\r\nimport { class_type, union_type, int32_type, array_type } from \"../fable-library.3.0.4/Reflection.js\";\r\nimport { fill } from \"../fable-library.3.0.4/Array.js\";\r\nimport { comparePrimitives, max } from \"../fable-library.3.0.4/Util.js\";\r\nimport { some } from \"../fable-library.3.0.4/Option.js\";\r\nimport { rangeNumber, singleton, collect, take, skip, append, delay } from \"../fable-library.3.0.4/Seq.js\";\r\n\r\nexport class RingState$1 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Writable\", \"ReadWritable\"];\r\n    }\r\n}\r\n\r\nexport function RingState$1$reflection(gen0) {\r\n    return union_type(\"Elmish.RingState`1\", [gen0], RingState$1, () => [[[\"wx\", array_type(gen0)], [\"ix\", int32_type]], [[\"rw\", array_type(gen0)], [\"wix\", int32_type], [\"rix\", int32_type]]]);\r\n}\r\n\r\nexport class RingBuffer$1 {\r\n    constructor(size) {\r\n        this.state = (new RingState$1(0, fill(new Array(max(comparePrimitives, size, 10)), 0, max(comparePrimitives, size, 10), null), 0));\r\n    }\r\n}\r\n\r\nexport function RingBuffer$1$reflection(gen0) {\r\n    return class_type(\"Elmish.RingBuffer`1\", [gen0], RingBuffer$1);\r\n}\r\n\r\nexport function RingBuffer$1_$ctor_Z524259A4(size) {\r\n    return new RingBuffer$1(size);\r\n}\r\n\r\nexport function RingBuffer$1__Pop(__) {\r\n    const matchValue = __.state;\r\n    if (matchValue.tag === 1) {\r\n        const wix = matchValue.fields[1] | 0;\r\n        const rix = matchValue.fields[2] | 0;\r\n        const items = matchValue.fields[0];\r\n        const rix$0027 = ((rix + 1) % items.length) | 0;\r\n        if (rix$0027 === wix) {\r\n            __.state = (new RingState$1(0, items, wix));\r\n        }\r\n        else {\r\n            __.state = (new RingState$1(1, items, wix, rix$0027));\r\n        }\r\n        return some(items[rix]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function RingBuffer$1__Push_2B595(__, item) {\r\n    const matchValue = __.state;\r\n    if (matchValue.tag === 1) {\r\n        const wix_1 = matchValue.fields[1] | 0;\r\n        const rix = matchValue.fields[2] | 0;\r\n        const items_1 = matchValue.fields[0];\r\n        items_1[wix_1] = item;\r\n        const wix$0027 = ((wix_1 + 1) % items_1.length) | 0;\r\n        if (wix$0027 === rix) {\r\n            __.state = (new RingState$1(1, RingBuffer$1__doubleSize(__, rix, items_1), items_1.length, 0));\r\n        }\r\n        else {\r\n            __.state = (new RingState$1(1, items_1, wix$0027, rix));\r\n        }\r\n    }\r\n    else {\r\n        const ix = matchValue.fields[1] | 0;\r\n        const items = matchValue.fields[0];\r\n        items[ix] = item;\r\n        const wix = ((ix + 1) % items.length) | 0;\r\n        __.state = (new RingState$1(1, items, wix, ix));\r\n    }\r\n}\r\n\r\nfunction RingBuffer$1__doubleSize(this$, ix, items) {\r\n    return Array.from(delay(() => append(skip(ix, items), delay(() => append(take(ix, items), delay(() => collect((matchValue) => singleton(null), rangeNumber(0, 1, items.length))))))));\r\n}\r\n\r\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\nimport { min as min_1, compare, comparePrimitives, max as max_1 } from \"./Util.js\";\nimport { Dictionary } from \"./MutableMap.js\";\nimport { addToDict, addToSet, getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { iterate as iterate_1 } from \"./Seq.js\";\n\nfunction indexNotFound() {\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\n}\n\nfunction differentLengths() {\n    throw (new Error(\"Arrays had different lengths\"));\n}\n\nexport function append(array1, array2, cons) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new (cons || Array)((len1 + len2));\n    for (let i = 0; i <= (len1 - 1); i++) {\n        newArray[i] = array1[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        newArray[i_1 + len1] = array2[i_1];\n    }\n    return newArray;\n}\n\nexport function filter(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function fill(target, targetIndex, count, value) {\n    const start = targetIndex | 0;\n    return target.fill(value, start, (start + count));\n}\n\nexport function getSubArray(array, start, count) {\n    const start_1 = start | 0;\n    return array.slice(start_1, (start_1 + count));\n}\n\nexport function last(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    return array[array.length - 1];\n}\n\nexport function tryLast(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[array.length - 1]);\n    }\n}\n\nexport function mapIndexed(f, source, cons) {\n    const len = source.length | 0;\n    const target = new (cons || Array)(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(i, source[i]);\n    }\n    return target;\n}\n\nexport function map(f, source, cons) {\n    const len = source.length | 0;\n    const target = new (cons || Array)(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(source[i]);\n    }\n    return target;\n}\n\nexport function mapIndexed2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function map2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function mapIndexed3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function map3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function mapFold(mapping, state, array, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = new (cons || Array)(matchValue);\n        for (let i = 0; i <= (array.length - 1); i++) {\n            const patternInput = mapping(acc, array[i]);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function mapFoldBack(mapping, array, state, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = new (cons || Array)(matchValue);\n        for (let i = array.length - 1; i >= 0; i--) {\n            const patternInput = mapping(array[i], acc);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function indexed(source) {\n    const len = source.length | 0;\n    const target = new Array(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = [i, source[i]];\n    }\n    return target;\n}\n\nexport function truncate(count, array) {\n    const count_1 = max_1(comparePrimitives, 0, count) | 0;\n    const start = 0;\n    return array.slice(start, (start + count_1));\n}\n\nexport function concat(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const matchValue = arrays_1.length | 0;\n    switch (matchValue) {\n        case 0: {\n            return new (cons || Array)(0);\n        }\n        case 1: {\n            return arrays_1[0];\n        }\n        default: {\n            let totalIdx = 0;\n            let totalLength = 0;\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\n                const arr_1 = arrays_1[idx];\n                totalLength = (totalLength + arr_1.length);\n            }\n            const result = new (cons || Array)(totalLength);\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\n                const arr_2 = arrays_1[idx_1];\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\n                    result[totalIdx] = arr_2[j];\n                    totalIdx = (totalIdx + 1);\n                }\n            }\n            return result;\n        }\n    }\n}\n\nexport function collect(mapping, array, cons) {\n    return concat(map(mapping, array, null), cons);\n}\n\nexport function countBy(projection, array, eq) {\n    const dict = new Dictionary([], eq);\n    const keys = [];\n    for (let idx = 0; idx <= (array.length - 1); idx++) {\n        const key = projection(array[idx]);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            const value_1 = keys.push(key);\n            void value_1;\n        }\n    }\n    return map((key_1) => [key_1, getItemFromDict(dict, key_1)], keys, null);\n}\n\nexport function distinctBy(projection, array, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => addToSet(projection(arg), hashSet), array);\n}\n\nexport function distinct(array, eq) {\n    return distinctBy((x) => x, array, eq);\n}\n\nexport function where(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function contains(value, array, eq) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return false;\n            }\n            else if (eq.Equals(value, array[i])) {\n                return true;\n            }\n            else {\n                i_mut = (i + 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (array.length === 0) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return array.filter(((arg00) => addToSet(arg00, cached)));\n    }\n}\n\nexport function groupBy(projection, array, eq) {\n    const dict = new Dictionary([], eq);\n    const keys = [];\n    for (let idx = 0; idx <= (array.length - 1); idx++) {\n        const v = array[idx];\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            void (matchValue[1].push(v));\n        }\n        else {\n            addToDict(dict, key, [v]);\n            const value = keys.push(key);\n            void value;\n        }\n    }\n    return map((key_1) => [key_1, Array.from(getItemFromDict(dict, key_1))], keys, null);\n}\n\nexport function empty(cons) {\n    return new (cons || Array)(0);\n}\n\nexport function singleton(value, cons) {\n    const ar = new (cons || Array)(1);\n    ar[0] = value;\n    return ar;\n}\n\nexport function initialize(count, initializer, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = new (cons || Array)(count);\n    for (let i = 0; i <= (count - 1); i++) {\n        result[i] = initializer(i);\n    }\n    return result;\n}\n\nexport function pairwise(array) {\n    if (array.length < 2) {\n        return [];\n    }\n    else {\n        const count = (array.length - 1) | 0;\n        const result = new Array(count);\n        for (let i = 0; i <= (count - 1); i++) {\n            result[i] = [array[i], array[i + 1]];\n        }\n        return result;\n    }\n}\n\nexport function replicate(count, initial, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = new (cons || Array)(count);\n    for (let i = 0; i <= (result.length - 1); i++) {\n        result[i] = initial;\n    }\n    return result;\n}\n\nexport function copy(array) {\n    return array.slice();\n}\n\nexport function reverse(array) {\n    const array_2 = array.slice();\n    return array_2.reverse();\n}\n\nexport function scan(folder, state, array, cons) {\n    const res = new (cons || Array)((array.length + 1));\n    res[0] = state;\n    for (let i = 0; i <= (array.length - 1); i++) {\n        res[i + 1] = folder(res[i], array[i]);\n    }\n    return res;\n}\n\nexport function scanBack(folder, array, state, cons) {\n    const res = new (cons || Array)((array.length + 1));\n    res[array.length] = state;\n    for (let i = array.length - 1; i >= 0; i--) {\n        res[i] = folder(array[i], res[i + 1]);\n    }\n    return res;\n}\n\nexport function skip(count, array, cons) {\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === array.length) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const count_1 = ((count < 0) ? 0 : count) | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function skipWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = (count + 1);\n    }\n    if (count === array.length) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function take(count, array, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === 0) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const start = 0;\n        return array.slice(start, (start + count));\n    }\n}\n\nexport function takeWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = (count + 1);\n    }\n    if (count === 0) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const start = 0;\n        const count_1 = count | 0;\n        return array.slice(start, (start + count_1));\n    }\n}\n\nexport function addInPlace(x, array) {\n    const value = array.push(x);\n    void value;\n}\n\nexport function addRangeInPlace(range, array) {\n    iterate_1((x) => {\n        const value = array.push(x);\n        void value;\n    }, range);\n}\n\nexport function removeInPlace(item_1, array) {\n    const i = array.indexOf(item_1, 0);\n    if (i > -1) {\n        const value = array.splice(i, 1);\n        void value;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function removeAllInPlace(predicate, array) {\n    const countRemoveAll = (count) => {\n        const i = array.findIndex(predicate);\n        if (i > -1) {\n            const value = array.splice(i, 1);\n            void value;\n            return (countRemoveAll(count) + 1) | 0;\n        }\n        else {\n            return count | 0;\n        }\n    };\n    return countRemoveAll(0) | 0;\n}\n\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\n    const diff = (targetIndex - sourceIndex) | 0;\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\n        target[i + diff] = source[i];\n    }\n}\n\nexport function indexOf(array, item_1, start, count) {\n    const start_1 = defaultArg(start, 0) | 0;\n    const i = array.indexOf(item_1, start_1);\n    if ((count != null) ? (i >= (start_1 + value_2(count))) : false) {\n        return -1;\n    }\n    else {\n        return i | 0;\n    }\n}\n\nexport function partition(f, source, cons) {\n    const len = source.length | 0;\n    const res1 = new (cons || Array)(len);\n    const res2 = new (cons || Array)(len);\n    let iTrue = 0;\n    let iFalse = 0;\n    for (let i = 0; i <= (len - 1); i++) {\n        if (f(source[i])) {\n            res1[iTrue] = source[i];\n            iTrue = (iTrue + 1);\n        }\n        else {\n            res2[iFalse] = source[i];\n            iFalse = (iFalse + 1);\n        }\n    }\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\n\nexport function find(predicate, array) {\n    const matchValue = array.find(predicate);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_2(matchValue);\n    }\n}\n\nexport function tryFind(predicate, array) {\n    return array.find(predicate);\n}\n\nexport function findIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue | 0;\n    }\n    else {\n        return indexNotFound() | 0;\n    }\n}\n\nexport function tryFindIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function pick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return indexNotFound();\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue != null) {\n                    return value_2(matchValue);\n                }\n                else {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function tryPick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return void 0;\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue == null) {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function findBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return array[i];\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function tryFindBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return some(array[i]);\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function findLastIndex(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function findIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound() | 0;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function tryFindIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return i;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function choose(chooser, array, cons) {\n    return map((x_1) => value_2(chooser(x_1)), array.filter(((x) => (chooser(x) != null))), cons);\n}\n\nexport function foldIndexed(folder, state, array) {\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\n}\n\nexport function fold(folder, state, array) {\n    return array.reduce((folder), state);\n}\n\nexport function iterate(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(array[i]);\n    }\n}\n\nexport function iterateIndexed(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(i, array[i]);\n    }\n}\n\nexport function iterate2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(array1[i], array2[i]);\n    }\n}\n\nexport function iterateIndexed2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(i, array1[i], array2[i]);\n    }\n}\n\nexport function isEmpty(array) {\n    return array.length === 0;\n}\n\nexport function forAll(predicate, array) {\n    return array.every(predicate);\n}\n\nexport function permute(f, array) {\n    const size = array.length | 0;\n    const res = array.slice();\n    const checkFlags = new Array(size);\n    iterateIndexed((i, x) => {\n        const j = f(i) | 0;\n        if ((j < 0) ? true : (j >= size)) {\n            throw (new Error(\"Not a valid permutation\"));\n        }\n        res[j] = x;\n        checkFlags[j] = 1;\n    }, array);\n    if (!(checkFlags.every(((y) => (1 === y))))) {\n        throw (new Error(\"Not a valid permutation\"));\n    }\n    return res;\n}\n\nexport function setSlice(target, lower, upper, source) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const upper_1 = defaultArg(upper, 0) | 0;\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\n    for (let i = 0; i <= length; i++) {\n        target[i + lower_1] = source[i];\n    }\n}\n\nexport function sortInPlaceBy(projection, xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n}\n\nexport function sortInPlace(xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(x, y)));\n}\n\nexport function sort(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(x, y)));\n    return xs_1;\n}\n\nexport function sortBy(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n    return xs_1;\n}\n\nexport function sortDescending(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1)));\n    return xs_1;\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)));\n    return xs_1;\n}\n\nexport function sortWith(comparer, xs) {\n    const comparer_1 = comparer;\n    const xs_1 = xs.slice();\n    xs_1.sort(comparer_1);\n    return xs_1;\n}\n\nexport function unfold(generator, state) {\n    const res = [];\n    const loop = (state_1_mut) => {\n        loop:\n        while (true) {\n            const state_1 = state_1_mut;\n            const matchValue = generator(state_1);\n            if (matchValue != null) {\n                const x = matchValue[0];\n                const s = matchValue[1];\n                const value = res.push(x);\n                void value;\n                state_1_mut = s;\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(state);\n    return res;\n}\n\nexport function unzip(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n    }, array);\n    return [res1, res2];\n}\n\nexport function unzip3(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    const res3 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n        res3[i] = tupledArg[2];\n    }, array);\n    return [res1, res2, res3];\n}\n\nexport function zip(array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i]];\n    }\n    return result;\n}\n\nexport function zip3(array1, array2, array3) {\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i], array3[i]];\n    }\n    return result;\n}\n\nexport function chunkBySize(chunkSize, array) {\n    if (chunkSize < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\n            let slice;\n            const start_1 = (x * chunkSize) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            const value = result.push(slice);\n            void value;\n        }\n        return result;\n    }\n}\n\nexport function splitAt(index, array) {\n    let start;\n    if (index < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: index\"));\n    }\n    if (index > array.length) {\n        throw (new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\"));\n    }\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\n}\n\nexport function compareWith(comparer, array1, array2) {\n    if (array1 == null) {\n        if (array2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (array2 == null) {\n        return 1;\n    }\n    else {\n        let i = 0;\n        let result = 0;\n        const length1 = array1.length | 0;\n        const length2 = array2.length | 0;\n        if (length1 > length2) {\n            return 1;\n        }\n        else if (length1 < length2) {\n            return -1;\n        }\n        else {\n            while ((i < length1) ? (result === 0) : false) {\n                result = comparer(array1[i], array2[i]);\n                i = (i + 1);\n            }\n            return result | 0;\n        }\n    }\n}\n\nexport function equalsWith(comparer, array1, array2) {\n    return compareWith(compare, array1, array2) === 0;\n}\n\nexport function exactlyOne(array) {\n    if (array.length === 1) {\n        return array[0];\n    }\n    else if (array.length === 0) {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\n    }\n    else {\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\n    }\n}\n\nexport function head(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    else {\n        return array[0];\n    }\n}\n\nexport function tryHead(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[0]);\n    }\n}\n\nexport function tail(array) {\n    if (array.length === 0) {\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\n    }\n    return array.slice(1);\n}\n\nexport function item(index, array) {\n    return array[index];\n}\n\nexport function tryItem(index, array) {\n    if ((index < 0) ? true : (index >= array.length)) {\n        return void 0;\n    }\n    else {\n        return some(array[index]);\n    }\n}\n\nexport function foldBackIndexed(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\n}\n\nexport function foldBack(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\n}\n\nexport function foldIndexed2(folder, state, array1, array2) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        throw (new Error(\"Arrays have different lengths\"));\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        acc = folder(i, acc, array1[i], array2[i]);\n    }\n    return acc;\n}\n\nexport function fold2(folder, state, array1, array2) {\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\n}\n\nexport function foldBackIndexed2(folder, array1, array2, state) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const size = array1.length | 0;\n    for (let i = 1; i <= size; i++) {\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\n    }\n    return acc;\n}\n\nexport function foldBack2(f, array1, array2, state) {\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\n}\n\nexport function reduce(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduce(reduction_1);\n}\n\nexport function reduceBack(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduceRight(reduction_1);\n}\n\nexport function forAll2(predicate, array1, array2) {\n    return fold2((acc, x, y) => (acc ? predicate(x, y) : false), true, array1, array2);\n}\n\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\n    existsOffset:\n    while (true) {\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\n        if (index === array.length) {\n            return false;\n        }\n        else if (predicate(array[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array_mut = array;\n            index_mut = (index + 1);\n            continue existsOffset;\n        }\n        break;\n    }\n}\n\nexport function exists(predicate, array) {\n    return existsOffset(predicate, array, 0);\n}\n\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\n    existsOffset2:\n    while (true) {\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\n        if (index === array1.length) {\n            return false;\n        }\n        else if (predicate(array1[index], array2[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array1_mut = array1;\n            array2_mut = array2;\n            index_mut = (index + 1);\n            continue existsOffset2;\n        }\n        break;\n    }\n}\n\nexport function exists2(predicate, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    return existsOffset2(predicate, array1, array2, 0);\n}\n\nexport function sum(array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, array[i]);\n    }\n    return acc;\n}\n\nexport function sumBy(projection, array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, projection(array[i]));\n    }\n    return acc;\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, array[i]);\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function averageBy(projection, array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, projection(array[i]));\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res;\n    const len = max_1(comparePrimitives, 0, source.length - windowSize) | 0;\n    res = (new Array(len));\n    for (let i = windowSize; i <= source.length; i++) {\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\n    }\n    return res;\n}\n\nexport function splitInto(chunks, array) {\n    if (chunks < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        const chunks_1 = min_1(comparePrimitives, chunks, array.length) | 0;\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\n            let slice;\n            const start_1 = ((i * minChunkSize) + min_1(comparePrimitives, chunksWithExtraItem, i)) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            const value = result.push(slice);\n            void value;\n        }\n        return result;\n    }\n}\n\nexport function transpose(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const len = arrays_1.length | 0;\n    if (len === 0) {\n        return new Array(0);\n    }\n    else {\n        const lenInner = arrays_1[0].length | 0;\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\n            differentLengths();\n        }\n        const result = new Array(lenInner);\n        for (let i = 0; i <= (lenInner - 1); i++) {\n            result[i] = (new (cons || Array)(len));\n            for (let j = 0; j <= (len - 1); j++) {\n                result[i][j] = arrays_1[j][i];\n            }\n        }\n        return result;\n    }\n}\n\n","import { Record } from \"../fable-library.3.0.4/Types.js\";\r\nimport { record_type, class_type, string_type, tuple_type, list_type, lambda_type, unit_type } from \"../fable-library.3.0.4/Reflection.js\";\r\nimport { Cmd_exec, Cmd_batch, Cmd_none } from \"./cmd.fs.js\";\r\nimport { Log_toConsole, Log_onError } from \"./prelude.fs.js\";\r\nimport { curry, partialApply, uncurry } from \"../fable-library.3.0.4/Util.js\";\r\nimport { ofArray } from \"../fable-library.3.0.4/List.js\";\r\nimport { RingBuffer$1__Pop, RingBuffer$1__Push_2B595, RingBuffer$1_$ctor_Z524259A4 } from \"./ring.fs.js\";\r\nimport { value as value_1, some } from \"../fable-library.3.0.4/Option.js\";\r\nimport { printf, toText } from \"../fable-library.3.0.4/String.js\";\r\n\r\nexport class Program$4 extends Record {\r\n    constructor(init, update, subscribe, view, setState, onError, syncDispatch) {\r\n        super();\r\n        this.init = init;\r\n        this.update = update;\r\n        this.subscribe = subscribe;\r\n        this.view = view;\r\n        this.setState = setState;\r\n        this.onError = onError;\r\n        this.syncDispatch = syncDispatch;\r\n    }\r\n}\r\n\r\nexport function Program$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return record_type(\"Elmish.Program`4\", [gen0, gen1, gen2, gen3], Program$4, () => [[\"init\", lambda_type(gen0, tuple_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type))))], [\"update\", lambda_type(gen2, lambda_type(gen1, tuple_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type)))))], [\"subscribe\", lambda_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type)))], [\"view\", lambda_type(gen1, lambda_type(lambda_type(gen2, unit_type), gen3))], [\"setState\", lambda_type(gen1, lambda_type(lambda_type(gen2, unit_type), unit_type))], [\"onError\", lambda_type(tuple_type(string_type, class_type(\"System.Exception\")), unit_type)], [\"syncDispatch\", lambda_type(lambda_type(gen2, unit_type), lambda_type(gen2, unit_type))]]);\r\n}\r\n\r\nexport function ProgramModule_mkProgram(init, update, view) {\r\n    return new Program$4(init, update, (_arg1) => Cmd_none(), view, (model, arg) => {\r\n        const value = view(model, arg);\r\n        void value;\r\n    }, (tupledArg) => {\r\n        Log_onError(tupledArg[0], tupledArg[1]);\r\n    }, uncurry(2, (x) => x));\r\n}\r\n\r\nexport function ProgramModule_mkSimple(init, update, view) {\r\n    return new Program$4((arg) => [init(arg), Cmd_none()], (msg, arg_1) => [update(msg, arg_1), Cmd_none()], (_arg1) => Cmd_none(), view, (model, arg_2) => {\r\n        const value = view(model, arg_2);\r\n        void value;\r\n    }, (tupledArg) => {\r\n        Log_onError(tupledArg[0], tupledArg[1]);\r\n    }, uncurry(2, (x) => x));\r\n}\r\n\r\nexport function ProgramModule_withSubscription(subscribe, program) {\r\n    const sub = (model) => Cmd_batch(ofArray([program.subscribe(model), subscribe(model)]));\r\n    return new Program$4(program.init, program.update, sub, program.view, program.setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_withConsoleTrace(program) {\r\n    const traceInit = (arg) => {\r\n        const patternInput = program.init(arg);\r\n        const initModel = patternInput[0];\r\n        const cmd = patternInput[1];\r\n        Log_toConsole(\"Initial state:\", initModel);\r\n        return [initModel, cmd];\r\n    };\r\n    const traceUpdate = (msg, model) => {\r\n        Log_toConsole(\"New message:\", msg);\r\n        const patternInput_1 = program.update(msg, model);\r\n        const newModel = patternInput_1[0];\r\n        const cmd_1 = patternInput_1[1];\r\n        Log_toConsole(\"Updated state:\", newModel);\r\n        return [newModel, cmd_1];\r\n    };\r\n    return new Program$4(traceInit, traceUpdate, program.subscribe, program.view, program.setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_withTrace(trace, program) {\r\n    const update = (msg, model) => {\r\n        const patternInput = program.update(msg, model);\r\n        const state = patternInput[0];\r\n        const cmd = patternInput[1];\r\n        trace(msg, state);\r\n        return [state, cmd];\r\n    };\r\n    return new Program$4(program.init, update, program.subscribe, program.view, program.setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_withErrorHandler(onError, program) {\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_mapErrorHandler(map, program) {\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, partialApply(1, map, [program.onError]), program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_onError(program) {\r\n    return program.onError;\r\n}\r\n\r\nexport function ProgramModule_withSetState(setState, program) {\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_setState(program) {\r\n    return curry(2, program.setState);\r\n}\r\n\r\nexport function ProgramModule_view(program) {\r\n    return curry(2, program.view);\r\n}\r\n\r\nexport function ProgramModule_withSyncDispatch(syncDispatch, program) {\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, program.onError, syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_map(mapInit, mapUpdate, mapView, mapSetState, mapSubscribe, program) {\r\n    const init = partialApply(1, mapInit, [program.init]);\r\n    const update = partialApply(2, mapUpdate, [program.update]);\r\n    const view = partialApply(2, mapView, [program.view]);\r\n    const setState = partialApply(2, mapSetState, [program.setState]);\r\n    return new Program$4(init, uncurry(2, update), partialApply(1, mapSubscribe, [program.subscribe]), uncurry(2, view), uncurry(2, setState), program.onError, uncurry(2, (x) => x));\r\n}\r\n\r\nexport function ProgramModule_runWith(arg, program) {\r\n    const patternInput = program.init(arg);\r\n    const model = patternInput[0];\r\n    const cmd = patternInput[1];\r\n    const rb = RingBuffer$1_$ctor_Z524259A4(10);\r\n    let reentered = false;\r\n    let state = model;\r\n    const dispatch = (msg) => {\r\n        if (reentered) {\r\n            RingBuffer$1__Push_2B595(rb, msg);\r\n        }\r\n        else {\r\n            reentered = true;\r\n            let nextMsg = some(msg);\r\n            while (nextMsg != null) {\r\n                const msg_1 = value_1(nextMsg);\r\n                try {\r\n                    const patternInput_1 = program.update(msg_1, state);\r\n                    const model$0027 = patternInput_1[0];\r\n                    const cmd$0027 = patternInput_1[1];\r\n                    program.setState(model$0027, syncDispatch);\r\n                    Cmd_exec((ex) => {\r\n                        program.onError([toText(printf(\"Error in command while handling: %A\"))(msg_1), ex]);\r\n                    }, syncDispatch, cmd$0027);\r\n                    state = model$0027;\r\n                }\r\n                catch (ex_1) {\r\n                    program.onError([toText(printf(\"Unable to process the message: %A\"))(msg_1), ex_1]);\r\n                }\r\n                nextMsg = RingBuffer$1__Pop(rb);\r\n            }\r\n            reentered = false;\r\n        }\r\n    };\r\n    const syncDispatch = partialApply(1, program.syncDispatch, [dispatch]);\r\n    program.setState(model, syncDispatch);\r\n    let sub;\r\n    try {\r\n        sub = program.subscribe(model);\r\n    }\r\n    catch (ex_2) {\r\n        program.onError([\"Unable to subscribe:\", ex_2]);\r\n        sub = Cmd_none();\r\n    }\r\n    Cmd_exec((ex_3) => {\r\n        program.onError([\"Error intitializing:\", ex_3]);\r\n    }, syncDispatch, Cmd_batch(ofArray([sub, cmd])));\r\n}\r\n\r\nexport function ProgramModule_run(program) {\r\n    ProgramModule_runWith(void 0, program);\r\n}\r\n\r\n","import { Record } from \"../fable-library.3.0.4/Types.js\";\r\nimport { obj_type, record_type, bool_type, lambda_type, class_type, unit_type } from \"../fable-library.3.0.4/Reflection.js\";\r\nimport { Component } from \"react\";\r\nimport * as react from \"react\";\r\nimport { equalArrays, equals } from \"../fable-library.3.0.4/Util.js\";\r\n\r\nexport class LazyProps$1 extends Record {\r\n    constructor(model, render, equal) {\r\n        super();\r\n        this.model = model;\r\n        this.render = render;\r\n        this.equal = equal;\r\n    }\r\n}\r\n\r\nexport function LazyProps$1$reflection(gen0) {\r\n    return record_type(\"Elmish.React.LazyProps`1\", [gen0], LazyProps$1, () => [[\"model\", gen0], [\"render\", lambda_type(unit_type, class_type(\"Fable.React.ReactElement\"))], [\"equal\", lambda_type(gen0, lambda_type(gen0, bool_type))]]);\r\n}\r\n\r\nexport class Components_LazyView$1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    shouldComponentUpdate(nextProps, _nextState) {\r\n        const this$ = this;\r\n        return !(this$.props).equal((this$.props).model, nextProps.model);\r\n    }\r\n    render() {\r\n        const this$ = this;\r\n        return (this$.props).render();\r\n    }\r\n}\r\n\r\nexport function Components_LazyView$1$reflection(gen0) {\r\n    return class_type(\"Elmish.React.Components.LazyView`1\", [gen0], Components_LazyView$1, class_type(\"Fable.React.Component`2\", [LazyProps$1$reflection(gen0), obj_type]));\r\n}\r\n\r\nexport function Components_LazyView$1_$ctor_Z7829D94B(props) {\r\n    return new Components_LazyView$1(props);\r\n}\r\n\r\nexport function Common_lazyViewWith(equal, view, state) {\r\n    return react.createElement(Components_LazyView$1, new LazyProps$1(state, () => view(state), equal));\r\n}\r\n\r\nexport function Common_lazyView2With(equal, view, state, dispatch) {\r\n    return react.createElement(Components_LazyView$1, new LazyProps$1(state, () => view(state, dispatch), equal));\r\n}\r\n\r\nexport function Common_lazyView3With(equal, view, state1, state2, dispatch) {\r\n    return react.createElement(Components_LazyView$1, new LazyProps$1([state1, state2], () => view(state1, state2, dispatch), equal));\r\n}\r\n\r\nexport function Common_lazyView(view) {\r\n    return (state) => Common_lazyViewWith(equals, view, state);\r\n}\r\n\r\nexport function Common_lazyView2(view) {\r\n    return (state) => ((dispatch) => Common_lazyView2With(equals, view, state, dispatch));\r\n}\r\n\r\nexport function Common_lazyView3(view) {\r\n    return (state1) => ((state2) => ((dispatch) => Common_lazyView3With(equalArrays, view, state1, state2, dispatch)));\r\n}\r\n\r\n","import * as react$002Ddom from \"react-dom\";\r\nimport { uncurry } from \"../fable-library.3.0.4/Util.js\";\r\nimport { ProgramModule_withSetState, ProgramModule_view } from \"../Fable.Elmish.3.1.0/program.fs.js\";\r\nimport { Common_lazyView2With } from \"./common.fs.js\";\r\n\r\nexport function Program_Internal_withReactBatchedUsing(lazyView2With, placeholderId, program) {\r\n    let lastRequest = void 0;\r\n    const setState = (model, dispatch) => {\r\n        if (lastRequest != null) {\r\n            const r = lastRequest;\r\n            window.cancelAnimationFrame(r);\r\n        }\r\n        lastRequest = window.requestAnimationFrame((_arg1) => {\r\n            react$002Ddom.render(lazyView2With((x, y) => (x === y), uncurry(2, ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));\r\n        });\r\n    };\r\n    return ProgramModule_withSetState(setState, program);\r\n}\r\n\r\nexport function Program_Internal_withReactSynchronousUsing(lazyView2With, placeholderId, program) {\r\n    const setState = (model, dispatch) => {\r\n        react$002Ddom.render(lazyView2With((x, y) => (x === y), uncurry(2, ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));\r\n    };\r\n    return ProgramModule_withSetState(setState, program);\r\n}\r\n\r\nexport function Program_Internal_withReactHydrateUsing(lazyView2With, placeholderId, program) {\r\n    const setState = (model, dispatch) => {\r\n        react$002Ddom.hydrate(lazyView2With((x, y) => (x === y), uncurry(2, ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));\r\n    };\r\n    return ProgramModule_withSetState(setState, program);\r\n}\r\n\r\nexport function Program_withReactBatched(placeholderId, program) {\r\n    return Program_Internal_withReactBatchedUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReactSynchronous(placeholderId, program) {\r\n    return Program_Internal_withReactSynchronousUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReact(placeholderId, program) {\r\n    return Program_Internal_withReactBatchedUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReactUnoptimized(placeholderId, program) {\r\n    return Program_Internal_withReactSynchronousUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReactHydrate(placeholderId, program) {\r\n    return Program_Internal_withReactHydrateUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\n","import { ofSeq, tail, exists, cons, length, getSlice, head, ofArray } from \"./.fable/fable-library.3.0.4/List.js\";\r\nimport { Record, Union } from \"./.fable/fable-library.3.0.4/Types.js\";\r\nimport { record_type, option_type, list_type, tuple_type, int32_type, union_type } from \"./.fable/fable-library.3.0.4/Reflection.js\";\r\nimport { randomNext, equals, equalArrays } from \"./.fable/fable-library.3.0.4/Util.js\";\r\nimport { FSharpChoice$2 } from \"./.fable/fable-library.3.0.4/Choice.js\";\r\nimport { Cmd_none, Cmd_ofSub } from \"./.fable/Fable.Elmish.3.1.0/cmd.fs.js\";\r\nimport { createElement } from \"react\";\r\nimport { reactApi } from \"./.fable/Feliz.1.29.0/Interop.fs.js\";\r\nimport { empty, collect, singleton, append, delay } from \"./.fable/fable-library.3.0.4/Seq.js\";\r\nimport { interpolate, toText } from \"./.fable/fable-library.3.0.4/String.js\";\r\nimport { ProgramModule_mkProgram, ProgramModule_withConsoleTrace, ProgramModule_withSubscription, ProgramModule_run } from \"./.fable/Fable.Elmish.3.1.0/program.fs.js\";\r\nimport { Program_withReactSynchronous } from \"./.fable/Fable.Elmish.React.3.0.1/react.fs.js\";\r\n\r\nexport const rnd = {};\r\n\r\nexport const Const_width = 30;\r\n\r\nexport const Const_height = 30;\r\n\r\nexport const Const_bricksize = 30;\r\n\r\nexport const Const_initSnake = ofArray([[7, 5], [6, 5], [5, 5]]);\r\n\r\nexport const Const_startInterval = 500;\r\n\r\nexport class Direction extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Up\", \"Down\", \"Left\", \"Right\"];\r\n    }\r\n}\r\n\r\nexport function Direction$reflection() {\r\n    return union_type(\"App.Direction\", [], Direction, () => [[], [], [], []]);\r\n}\r\n\r\nexport class GameState extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Start\", \"Running\", \"Lost\"];\r\n    }\r\n}\r\n\r\nexport function GameState$reflection() {\r\n    return union_type(\"App.GameState\", [], GameState, () => [[], [], []]);\r\n}\r\n\r\nexport class Model extends Record {\r\n    constructor(Score, Snake, Apple, CurrentDirection, GameState, Timer) {\r\n        super();\r\n        this.Score = (Score | 0);\r\n        this.Snake = Snake;\r\n        this.Apple = Apple;\r\n        this.CurrentDirection = CurrentDirection;\r\n        this.GameState = GameState;\r\n        this.Timer = Timer;\r\n    }\r\n}\r\n\r\nexport function Model$reflection() {\r\n    return record_type(\"App.Model\", [], Model, () => [[\"Score\", int32_type], [\"Snake\", list_type(tuple_type(int32_type, int32_type))], [\"Apple\", tuple_type(int32_type, int32_type)], [\"CurrentDirection\", Direction$reflection()], [\"GameState\", GameState$reflection()], [\"Timer\", option_type(int32_type)]]);\r\n}\r\n\r\nexport class Msg extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"MoveNext\", \"ChangeDirection\", \"SetTimer\", \"StartGame\"];\r\n    }\r\n}\r\n\r\nexport function Msg$reflection() {\r\n    return union_type(\"App.Msg\", [], Msg, () => [[], [[\"Item\", Direction$reflection()]], [[\"Item\", option_type(int32_type)]], []]);\r\n}\r\n\r\nexport function DirectionModule_toVector(direction) {\r\n    switch (direction.tag) {\r\n        case 1: {\r\n            return [0, 1];\r\n        }\r\n        case 2: {\r\n            return [-1, 0];\r\n        }\r\n        case 3: {\r\n            return [1, 0];\r\n        }\r\n        default: {\r\n            return [0, -1];\r\n        }\r\n    }\r\n}\r\n\r\nexport function Snake_calcMove(direction, snake) {\r\n    const patternInput = DirectionModule_toVector(direction);\r\n    const vy = patternInput[1] | 0;\r\n    const vx = patternInput[0] | 0;\r\n    const patternInput_1 = head(snake);\r\n    const hy = patternInput_1[1] | 0;\r\n    const hx = patternInput_1[0] | 0;\r\n    const patternInput_2 = [hx + vx, hy + vy];\r\n    const ny = patternInput_2[1] | 0;\r\n    const nx = patternInput_2[0] | 0;\r\n    return cons([nx, ny], getSlice(0, length(snake) - 2, snake));\r\n}\r\n\r\nfunction Snake_isCollided(snake) {\r\n    let y_1, x_1;\r\n    const patternInput = head(snake);\r\n    const y = patternInput[1] | 0;\r\n    const x = patternInput[0] | 0;\r\n    const matchValue = [x, y];\r\n    if (matchValue[0] === -1) {\r\n        return true;\r\n    }\r\n    else if (matchValue[1] === -1) {\r\n        return true;\r\n    }\r\n    else if (y_1 = (matchValue[1] | 0), (x_1 = (matchValue[0] | 0), (x_1 === Const_width) ? true : (y_1 === Const_height))) {\r\n        const y_2 = matchValue[1] | 0;\r\n        const x_2 = matchValue[0] | 0;\r\n        return true;\r\n    }\r\n    else {\r\n        return exists((tupledArg) => {\r\n            const tx = tupledArg[0] | 0;\r\n            const ty = tupledArg[1] | 0;\r\n            return equalArrays([tx, ty], [x, y]);\r\n        }, tail(snake));\r\n    }\r\n}\r\n\r\nexport function Snake_calcCatch(direction, snake) {\r\n    const patternInput = DirectionModule_toVector(direction);\r\n    const vy = patternInput[1] | 0;\r\n    const vx = patternInput[0] | 0;\r\n    const patternInput_1 = head(snake);\r\n    const hy = patternInput_1[1] | 0;\r\n    const hx = patternInput_1[0] | 0;\r\n    const patternInput_2 = [hx + vx, hy + vy];\r\n    const ny = patternInput_2[1] | 0;\r\n    const nx = patternInput_2[0] | 0;\r\n    return cons([nx, ny], snake);\r\n}\r\n\r\nfunction Snake_gotApple(applePos, snake) {\r\n    const snakePos = head(snake);\r\n    return equals(applePos, snakePos);\r\n}\r\n\r\nexport function Snake_$007CIsCollided$007CGotApple$007CAllGood$007C(applePos, snake) {\r\n    if (Snake_isCollided(snake)) {\r\n        return new FSharpChoice$2(0, void 0);\r\n    }\r\n    else if (Snake_gotApple(applePos, snake)) {\r\n        return new FSharpChoice$2(1, void 0);\r\n    }\r\n    else {\r\n        return new FSharpChoice$2(2, void 0);\r\n    }\r\n}\r\n\r\nexport function Commands_startTimer(interval, state) {\r\n    return Cmd_ofSub((dispatch) => {\r\n        if (state.Timer != null) {\r\n        }\r\n        else {\r\n            const timer = setInterval(() => {\r\n                dispatch(new Msg(0));\r\n            }, interval) | 0;\r\n            dispatch(new Msg(2, timer));\r\n        }\r\n    });\r\n}\r\n\r\nexport function Commands_updateTimer(interval, state) {\r\n    return Cmd_ofSub((dispatch) => {\r\n        const matchValue = state.Timer;\r\n        if (matchValue != null) {\r\n            const timer = matchValue | 0;\r\n            clearInterval(timer);\r\n            dispatch(new Msg(2, void 0));\r\n            const timer_1 = setInterval(() => {\r\n                dispatch(new Msg(0));\r\n            }, interval) | 0;\r\n            dispatch(new Msg(2, timer_1));\r\n        }\r\n    });\r\n}\r\n\r\nexport function Commands_stopTimer(state) {\r\n    return Cmd_ofSub((dispatch) => {\r\n        const matchValue = state.Timer;\r\n        if (matchValue != null) {\r\n            const timer = matchValue | 0;\r\n            clearInterval(timer);\r\n            dispatch(new Msg(2, void 0));\r\n        }\r\n    });\r\n}\r\n\r\nexport function init() {\r\n    const newApple = [randomNext(0, Const_width), randomNext(0, Const_height)];\r\n    const state = new Model(0, Const_initSnake, newApple, new Direction(3), new GameState(0), void 0);\r\n    return [state, Cmd_none()];\r\n}\r\n\r\nexport function update(msg, state) {\r\n    switch (msg.tag) {\r\n        case 1: {\r\n            const dir = msg.fields[0];\r\n            return [new Model(state.Score, state.Snake, state.Apple, dir, state.GameState, state.Timer), Cmd_none()];\r\n        }\r\n        case 0: {\r\n            const matchValue = state.GameState;\r\n            switch (matchValue.tag) {\r\n                case 2: {\r\n                    return [state, Commands_stopTimer(state)];\r\n                }\r\n                case 0: {\r\n                    return [state, Cmd_none()];\r\n                }\r\n                default: {\r\n                    const newSnake = Snake_calcMove(state.CurrentDirection, state.Snake);\r\n                    const matchValue_1 = [state.Apple, newSnake];\r\n                    const activePatternResult7084 = Snake_$007CIsCollided$007CGotApple$007CAllGood$007C(matchValue_1[0], matchValue_1[1]);\r\n                    if (activePatternResult7084.tag === 1) {\r\n                        const newSnake_1 = Snake_calcCatch(state.CurrentDirection, state.Snake);\r\n                        const newScore = (state.Score + 1) | 0;\r\n                        const newTimerInverall = (~(~(((100 - newScore) * Const_startInterval) / 100))) | 0;\r\n                        const newApple = [randomNext(0, Const_width), randomNext(0, Const_height)];\r\n                        return [new Model(state.Score + 1, newSnake_1, newApple, state.CurrentDirection, state.GameState, state.Timer), Commands_updateTimer(newTimerInverall, state)];\r\n                    }\r\n                    else if (activePatternResult7084.tag === 2) {\r\n                        return [new Model(state.Score, newSnake, state.Apple, state.CurrentDirection, state.GameState, state.Timer), Cmd_none()];\r\n                    }\r\n                    else {\r\n                        return [new Model(state.Score, state.Snake, state.Apple, state.CurrentDirection, new GameState(2), state.Timer), Cmd_none()];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case 2: {\r\n            const timer = msg.fields[0];\r\n            return [new Model(state.Score, state.Snake, state.Apple, state.CurrentDirection, state.GameState, timer), Cmd_none()];\r\n        }\r\n        default: {\r\n            return [new Model(state.Score, state.Snake, state.Apple, state.CurrentDirection, new GameState(1), state.Timer), Commands_startTimer(Const_startInterval, state)];\r\n        }\r\n    }\r\n}\r\n\r\nexport function drawPlayground(width, heigth) {\r\n    const children = ofArray([createElement(\"div\", {\r\n        style: {\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            backgroundColor: \"#00c000\",\r\n            width: Const_bricksize * (width + 2),\r\n            height: Const_bricksize,\r\n        },\r\n    }), createElement(\"div\", {\r\n        style: {\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            backgroundColor: \"#00c000\",\r\n            width: Const_bricksize,\r\n            height: Const_bricksize * (Const_height + 2),\r\n        },\r\n    }), createElement(\"div\", {\r\n        style: {\r\n            position: \"absolute\",\r\n            left: Const_bricksize * (width + 1),\r\n            top: 0,\r\n            backgroundColor: \"#00c000\",\r\n            width: Const_bricksize,\r\n            height: Const_bricksize * (Const_height + 2),\r\n        },\r\n    }), createElement(\"div\", {\r\n        style: {\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 30 * (Const_height + 1),\r\n            backgroundColor: \"#00c000\",\r\n            width: Const_bricksize * (width + 2),\r\n            height: Const_bricksize,\r\n        },\r\n    })]);\r\n    return createElement(\"div\", {\r\n        children: reactApi.Children.toArray(Array.from(children)),\r\n    });\r\n}\r\n\r\nexport function view(state, dispatch) {\r\n    const children = ofSeq(delay(() => append(singleton(drawPlayground(Const_width, Const_height)), delay(() => {\r\n        let value_6;\r\n        return append(singleton(createElement(\"div\", {\r\n            style: {\r\n                position: \"absolute\",\r\n                left: Const_bricksize,\r\n                top: Const_bricksize,\r\n            },\r\n            children: reactApi.Children.toArray([(value_6 = toText(interpolate(\"Score: %P()\", [state.Score])), createElement(\"h1\", {\r\n                children: [value_6],\r\n            }))]),\r\n        })), delay(() => {\r\n            const patternInput = state.Apple;\r\n            const ay = patternInput[1] | 0;\r\n            const ax = patternInput[0] | 0;\r\n            return append(singleton(createElement(\"div\", {\r\n                style: {\r\n                    position: \"absolute\",\r\n                    left: Const_bricksize + (ax * Const_bricksize),\r\n                    top: Const_bricksize + (ay * Const_bricksize),\r\n                    backgroundColor: \"#c00000\",\r\n                    width: Const_bricksize,\r\n                    height: Const_bricksize,\r\n                },\r\n            })), delay(() => append(collect((matchValue) => {\r\n                const y = matchValue[1] | 0;\r\n                const x = matchValue[0] | 0;\r\n                return singleton(createElement(\"div\", {\r\n                    style: {\r\n                        position: \"absolute\",\r\n                        left: Const_bricksize + (x * Const_bricksize),\r\n                        top: Const_bricksize + (y * Const_bricksize),\r\n                        backgroundColor: \"#00c0c0\",\r\n                        width: Const_bricksize,\r\n                        height: Const_bricksize,\r\n                    },\r\n                }));\r\n            }, state.Snake), delay(() => {\r\n                const matchValue_1 = state.GameState;\r\n                switch (matchValue_1.tag) {\r\n                    case 2: {\r\n                        return singleton(createElement(\"div\", {\r\n                            style: {\r\n                                position: \"absolute\",\r\n                                left: Const_bricksize + (11 * Const_bricksize),\r\n                                top: Const_bricksize + (12 * Const_bricksize),\r\n                            },\r\n                            children: reactApi.Children.toArray([createElement(\"h1\", {\r\n                                children: [\"You Loose!\"],\r\n                            }), createElement(\"button\", {\r\n                                onClick: (_arg1) => {\r\n                                    dispatch(new Msg(3));\r\n                                },\r\n                                onClick: (_arg2) => {\r\n                                    dispatch(new Msg(3));\r\n                                },\r\n                                children: \"Again!\",\r\n                                style: {\r\n                                    fontSize: 70 + \"px\",\r\n                                },\r\n                            })]),\r\n                        }));\r\n                    }\r\n                    case 0: {\r\n                        return singleton(createElement(\"div\", {\r\n                            style: {\r\n                                position: \"absolute\",\r\n                                left: Const_bricksize + (11 * Const_bricksize),\r\n                                top: Const_bricksize + (12 * Const_bricksize),\r\n                            },\r\n                            children: reactApi.Children.toArray([createElement(\"h1\", {\r\n                                children: [\"Ready?\"],\r\n                            }), createElement(\"button\", {\r\n                                onClick: (_arg3) => {\r\n                                    dispatch(new Msg(3));\r\n                                },\r\n                                children: \"Start Game\",\r\n                                style: {\r\n                                    fontSize: 26 + \"px\",\r\n                                },\r\n                            })]),\r\n                        }));\r\n                    }\r\n                    default: {\r\n                        return empty();\r\n                    }\r\n                }\r\n            }))));\r\n        }));\r\n    }))));\r\n    return createElement(\"div\", {\r\n        children: reactApi.Children.toArray(Array.from(children)),\r\n    });\r\n}\r\n\r\nexport function subscription(state) {\r\n    return Cmd_ofSub((dispatch) => {\r\n        const value = document.addEventListener(\"keydown\", (e) => {\r\n            const keyev = e;\r\n            const matchValue = keyev.key;\r\n            switch (matchValue) {\r\n                case \"w\": {\r\n                    dispatch(new Msg(1, new Direction(0)));\r\n                    break;\r\n                }\r\n                case \"d\": {\r\n                    dispatch(new Msg(1, new Direction(3)));\r\n                    break;\r\n                }\r\n                case \"a\": {\r\n                    dispatch(new Msg(1, new Direction(2)));\r\n                    break;\r\n                }\r\n                case \"s\": {\r\n                    dispatch(new Msg(1, new Direction(1)));\r\n                    break;\r\n                }\r\n                default: {\r\n                }\r\n            }\r\n        });\r\n        void undefined;\r\n    });\r\n}\r\n\r\nProgramModule_run(Program_withReactSynchronous(\"elmish-app\", ProgramModule_withSubscription(subscription, ProgramModule_withConsoleTrace(ProgramModule_mkProgram(init, update, view)))));\r\n\r\n"],"sourceRoot":""}